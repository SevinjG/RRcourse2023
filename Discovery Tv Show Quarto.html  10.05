<!DOCTYPE html>
<!-- saved from url=(0022)http://localhost:4557/ -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<meta name="generator" content="quarto-1.2.335">

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">

<meta name="author" content="Sevinj Guluyeva">

<title>Discovery Tv Show Quarto</title>
<style>
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
ul.task-list{list-style: none;}
ul.task-list li input[type="checkbox"] {
  width: 0.8em;
  margin: 0 0.8em 0.2em -1.6em;
  vertical-align: middle;
}
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { color: #008000; } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { color: #008000; font-weight: bold; } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
</style>


<script src="./Discovery Tv Show Quarto_files/clipboard.min.js.download"></script>
<script src="./Discovery Tv Show Quarto_files/quarto.js.download"></script>
<script src="./Discovery Tv Show Quarto_files/popper.min.js.download"></script>
<script src="./Discovery Tv Show Quarto_files/tippy.umd.min.js.download"></script>
<script src="./Discovery Tv Show Quarto_files/anchor.min.js.download"></script>
<link href="./Discovery Tv Show Quarto_files/tippy.css" rel="stylesheet">
<link href="./Discovery Tv Show Quarto_files/quarto-syntax-highlighting.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-text-highlighting-styles">
<link href="http://localhost:4557/RR_report_files/libs/quarto-html/quarto-syntax-highlighting-dark.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-text-highlighting-styles">
<script src="./Discovery Tv Show Quarto_files/bootstrap.min.js.download"></script>
<link href="./Discovery Tv Show Quarto_files/bootstrap-icons.css" rel="stylesheet">
<link href="./Discovery Tv Show Quarto_files/bootstrap.min.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-bootstrap" data-mode="light">
<link href="http://localhost:4557/RR_report_files/libs/bootstrap/bootstrap-dark.min.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-bootstrap" data-mode="dark">
<style>html{ scroll-behavior: smooth; }</style>


</head>

<body class="quarto-light">

<div id="quarto-content" class="page-columns page-rows-contents page-layout-article">
<div id="quarto-margin-sidebar" class="sidebar margin-sidebar">
</div>
<main class="content" id="quarto-document-content">

<header id="title-block-header" class="quarto-title-block default">
<div class="quarto-title">
<h1 class="title">Discovery Tv Show Quarto</h1>
<p class="subtitle lead">YAML, rendering and parameters</p>
</div>



<div class="quarto-title-meta">

    <div>
    <div class="quarto-title-meta-heading">Author</div>
    <div class="quarto-title-meta-contents">
             <p>Sevinj Guluyeva </p>
          </div>
  </div>
    
    <div>
    <div class="quarto-title-meta-heading">Published</div>
    <div class="quarto-title-meta-contents">
      <p class="date">10/5/23</p>
    </div>
  </div>
  
    
  </div>
  

</header>
<nav id="TOC" role="doc-toc">
    <h2 id="toc-title">Contents</h2>
   
  <ul>
  <li><a href="http://localhost:4557/#rr-task" id="toc-rr-task"><span class="toc-section-number">1</span>  RR task</a></li>
  <li><a href="http://localhost:4557/#sevinj-guluyeva-444423" id="toc-sevinj-guluyeva-444423"><span class="toc-section-number">2</span>  Sevinj Guluyeva 444423</a></li>
  <li><a href="http://localhost:4557/#brief-descriptionn-of-discovery-tv-show" id="toc-brief-descriptionn-of-discovery-tv-show"><span class="toc-section-number">3</span>  # Brief Descriptionn of “Discovery” TV Show</a></li>
  <li><a href="http://localhost:4557/#basic-statistics-on-viewership-or-ratings" id="toc-basic-statistics-on-viewership-or-ratings"><span class="toc-section-number">4</span>  Basic Statistics on Viewership or Ratings</a></li>
  <li><a href="http://localhost:4557/#print-the-description-logo-and-statistics" id="toc-print-the-description-logo-and-statistics"><span class="toc-section-number">5</span>  Print the Description, Logo and Statistics</a></li>
  <li><a href="http://localhost:4557/#graph-of-viewership-over-time" id="toc-graph-of-viewership-over-time"><span class="toc-section-number">6</span>  Graph of Viewership Over Time</a></li>
  <li><a href="http://localhost:4557/#create-a-line-plot-of-viewership-over-time" id="toc-create-a-line-plot-of-viewership-over-time"><span class="toc-section-number">7</span>  Create a line plot of viewership over time</a></li>
  <li><a href="http://localhost:4557/#graph-of-episode-to-episode-changes-in-viewership" id="toc-graph-of-episode-to-episode-changes-in-viewership"><span class="toc-section-number">8</span>  Graph of Episode-to-Episode Changes in Viewership</a></li>
  <li><a href="http://localhost:4557/#create-a-data-frame-with-viewership-data-for-a-fictional-show" id="toc-create-a-data-frame-with-viewership-data-for-a-fictional-show"><span class="toc-section-number">9</span>  Create a data frame with viewership data for a fictional show</a></li>
  <li><a href="http://localhost:4557/#create-a-variable-for-episode-number" id="toc-create-a-variable-for-episode-number"><span class="toc-section-number">10</span>  Create a variable for episode number</a></li>
  <li><a href="http://localhost:4557/#calculate-episode-to-episode-changes-in-viewership" id="toc-calculate-episode-to-episode-changes-in-viewership"><span class="toc-section-number">11</span>  Calculate episode-to-episode changes in viewership</a></li>
  <li><a href="http://localhost:4557/#create-a-line-plot-of-episode-to-episode-changes-in-viewership" id="toc-create-a-line-plot-of-episode-to-episode-changes-in-viewership"><span class="toc-section-number">12</span>  Create a line plot of episode-to-episode changes in viewership</a></li>
  <li><a href="http://localhost:4557/#observed-changes-in-viewership" id="toc-observed-changes-in-viewership"><span class="toc-section-number">13</span>  Observed changes in viewership</a></li>
  </ul>
</nav>
<section id="rr-task" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> RR task</h1>
</section>
<section id="sevinj-guluyeva-444423" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Sevinj Guluyeva 444423</h1>
</section>
<section id="brief-descriptionn-of-discovery-tv-show" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> # Brief Descriptionn of “Discovery” TV Show</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-1_872582534f6bf524c31fa9c850b6204b">
<div class="sourceCode cell-code" id="cb1"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><a href="http://localhost:4557/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb1-2"><a href="http://localhost:4557/#cb1-2" aria-hidden="true" tabindex="-1"></a>discovery_description <span class="ot">&lt;-</span> <span class="st">"*Discovery* is an American pay television network that primarily broadcasts documentary and reality programming focused on popular science, technology, history, and culture. The channel is owned by Discovery, Inc. and was first launched in 1985. Some of the network's most popular shows include *MythBusters*, *Shark Week*, *Deadliest Catch*, and *Gold Rush*."</span></span>
<span id="cb1-3"><a href="http://localhost:4557/#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-2_5a8b81bd877d47bc62ac2b5ca7e58b3a">
<div class="sourceCode cell-code" id="cb2"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><a href="http://localhost:4557/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb2-2"><a href="http://localhost:4557/#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(discovery_description)</span>
<span id="cb2-3"><a href="http://localhost:4557/#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "*Discovery* is an American pay television network that primarily broadcasts documentary and reality programming focused on popular science, technology, history, and culture. The channel is owned by Discovery, Inc. and was first launched in 1985. Some of the network's most popular shows include *MythBusters*, *Shark Week*, *Deadliest Catch*, and *Gold Rush*."</code></pre>
</div>
</div>
</section>
<section id="basic-statistics-on-viewership-or-ratings" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Basic Statistics on Viewership or Ratings</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-3_94dede429ab7902d42aa99fb22692360">
<div class="sourceCode cell-code" id="cb4"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><a href="http://localhost:4557/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb4-2"><a href="http://localhost:4557/#cb4-2" aria-hidden="true" tabindex="-1"></a>discovery_viewership <span class="ot">&lt;-</span> <span class="st">"According to data from Statista, *Discovery* was the 11th most-watched cable network in the United States in 2021, with an average of 741 thousand viewers in primetime. The network has also received numerous awards and nominations for its programming, including multiple Primetime Emmy Awards."</span></span>
<span id="cb4-3"><a href="http://localhost:4557/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-4_e95d9df85efd5b1c8015ee81170311af">
<div class="sourceCode cell-code" id="cb5"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><a href="http://localhost:4557/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb5-2"><a href="http://localhost:4557/#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(discovery_viewership)</span>
<span id="cb5-3"><a href="http://localhost:4557/#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "According to data from Statista, *Discovery* was the 11th most-watched cable network in the United States in 2021, with an average of 741 thousand viewers in primetime. The network has also received numerous awards and nominations for its programming, including multiple Primetime Emmy Awards."</code></pre>
</div>
</div>
</section>
<section id="print-the-description-logo-and-statistics" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Print the Description, Logo and Statistics</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-5_3bdf3f5709d6f24a3a7b20d953821db6">
<div class="sourceCode cell-code" id="cb7"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"><a href="http://localhost:4557/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb7-2"><a href="http://localhost:4557/#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span>(discovery_description, <span class="st">"</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb7-3"><a href="http://localhost:4557/#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>*Discovery* is an American pay television network that primarily broadcasts documentary and reality programming focused on popular science, technology, history, and culture. The channel is owned by Discovery, Inc. and was first launched in 1985. Some of the network's most popular shows include *MythBusters*, *Shark Week*, *Deadliest Catch*, and *Gold Rush*. </code></pre>
</div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-6_2a0e3f3e0a25931ef45e527ffc54531e">
<div class="sourceCode cell-code" id="cb9"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><a href="http://localhost:4557/#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb9-2"><a href="http://localhost:4557/#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span>(discovery_viewership, <span class="st">"</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb9-3"><a href="http://localhost:4557/#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>According to data from Statista, *Discovery* was the 11th most-watched cable network in the United States in 2021, with an average of 741 thousand viewers in primetime. The network has also received numerous awards and nominations for its programming, including multiple Primetime Emmy Awards. </code></pre>
</div>
</div>
</section>
<section id="graph-of-viewership-over-time" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Graph of Viewership Over Time</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-7_f742456cc4ef3c18b0e8f7f2b7e00645">
<div class="sourceCode cell-code" id="cb11"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><a href="http://localhost:4557/#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb11-2"><a href="http://localhost:4557/#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span>(ggplot2)</span>
<span id="cb11-3"><a href="http://localhost:4557/#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-8_47b202e760d72de48303a3eb27b43dff">
<div class="sourceCode cell-code" id="cb12"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1"><a href="http://localhost:4557/#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb12-2"><a href="http://localhost:4557/#cb12-2" aria-hidden="true" tabindex="-1"></a>year <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="dv">2019</span>, <span class="dv">2020</span>, <span class="dv">2021</span>)</span>
<span id="cb12-3"><a href="http://localhost:4557/#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-9_6c3e4c09ba55b78c8c27cbe43e5e09d1">
<div class="sourceCode cell-code" id="cb13"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1"><a href="http://localhost:4557/#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb13-2"><a href="http://localhost:4557/#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(year)</span>
<span id="cb13-3"><a href="http://localhost:4557/#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2019 2020 2021</code></pre>
</div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-10_52ca6ebe13aeacd2b1f580d4108b7c2a">
<div class="sourceCode cell-code" id="cb15"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1"><a href="http://localhost:4557/#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb15-2"><a href="http://localhost:4557/#cb15-2" aria-hidden="true" tabindex="-1"></a>viewership <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="dv">725</span>, <span class="dv">736</span>, <span class="dv">741</span>)</span>
<span id="cb15-3"><a href="http://localhost:4557/#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-11_644bc7f3f12795bc30853e7a701cb293">
<div class="sourceCode cell-code" id="cb16"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><a href="http://localhost:4557/#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb16-2"><a href="http://localhost:4557/#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(viewership)</span>
<span id="cb16-3"><a href="http://localhost:4557/#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 725 736 741</code></pre>
</div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-12_e0c1260d48f64e4d369877eec8021641">
<div class="sourceCode cell-code" id="cb18"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1"><a href="http://localhost:4557/#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb18-2"><a href="http://localhost:4557/#cb18-2" aria-hidden="true" tabindex="-1"></a>viewership_data <span class="ot">&lt;-</span> <span class="fu">data.frame</span>(year, viewership)</span>
<span id="cb18-3"><a href="http://localhost:4557/#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-13_7e55ec70597f10be92e9e5e410064e88">
<div class="sourceCode cell-code" id="cb19"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1"><a href="http://localhost:4557/#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb19-2"><a href="http://localhost:4557/#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(viewership_data)</span>
<span id="cb19-3"><a href="http://localhost:4557/#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  year viewership
1 2019        725
2 2020        736
3 2021        741</code></pre>
</div>
</div>
</section>
<section id="create-a-line-plot-of-viewership-over-time" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Create a line plot of viewership over time</h1>
<div class="cell" data-hash="RR_report_cache/html/pressure_75d23a5b7adf9360c12c0c136e04f9e5">
<div class="cell-output-display">
<p><img src="./Discovery Tv Show Quarto_files/pressure-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>From the graph we can see how viewership fluctuated over the time. It is on the pick on 2021</p>
</section>
<section id="graph-of-episode-to-episode-changes-in-viewership" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Graph of Episode-to-Episode Changes in Viewership</h1>
</section>
<section id="create-a-data-frame-with-viewership-data-for-a-fictional-show" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Create a data frame with viewership data for a fictional show</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-14_dbc0a9291bee37229e9c3924762e5e43">
<div class="sourceCode cell-code" id="cb21"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb21-1"><a href="http://localhost:4557/#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb21-2"><a href="http://localhost:4557/#cb21-2" aria-hidden="true" tabindex="-1"></a>season <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>)</span>
<span id="cb21-3"><a href="http://localhost:4557/#cb21-3" aria-hidden="true" tabindex="-1"></a>episodes_per_season <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>, <span class="dv">10</span>)</span>
<span id="cb21-4"><a href="http://localhost:4557/#cb21-4" aria-hidden="true" tabindex="-1"></a>viewership <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="dv">1000</span>, <span class="dv">950</span>, <span class="dv">900</span>, <span class="dv">850</span>, <span class="dv">800</span>, <span class="dv">750</span>, <span class="dv">700</span>, <span class="dv">650</span>, <span class="dv">600</span>, <span class="dv">550</span>)</span>
<span id="cb21-5"><a href="http://localhost:4557/#cb21-5" aria-hidden="true" tabindex="-1"></a>viewership_data <span class="ot">&lt;-</span> <span class="fu">data.frame</span>(season, episodes_per_season, viewership)</span>
<span id="cb21-6"><a href="http://localhost:4557/#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-15_846aef66f82d31bbe8e299c1d2e41a1a">
<div class="sourceCode cell-code" id="cb22"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb22-1"><a href="http://localhost:4557/#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb22-2"><a href="http://localhost:4557/#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(viewership_data)</span>
<span id="cb22-3"><a href="http://localhost:4557/#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   season episodes_per_season viewership
1       1                  10       1000
2       2                  10        950
3       3                  10        900
4       4                  10        850
5       5                  10        800
6       6                  10        750
7       7                  10        700
8       8                  10        650
9       9                  10        600
10     10                  10        550</code></pre>
</div>
</div>
</section>
<section id="create-a-variable-for-episode-number" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Create a variable for episode number</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-16_cd357c75cdd73f8cadb2b28b7547ca0b">
<div class="sourceCode cell-code" id="cb24"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb24-1"><a href="http://localhost:4557/#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb24-2"><a href="http://localhost:4557/#cb24-2" aria-hidden="true" tabindex="-1"></a>viewership_data<span class="sc">$</span>episode <span class="ot">&lt;-</span> <span class="dv">1</span><span class="sc">:</span><span class="fu">nrow</span>(viewership_data)</span>
<span id="cb24-3"><a href="http://localhost:4557/#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-17_731ff07a72637fcdac07e56b4ed3052d">
<div class="sourceCode cell-code" id="cb25"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb25-1"><a href="http://localhost:4557/#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb25-2"><a href="http://localhost:4557/#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(viewership_data<span class="sc">$</span>episode)</span>
<span id="cb25-3"><a href="http://localhost:4557/#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
</div>
</section>
<section id="calculate-episode-to-episode-changes-in-viewership" class="level1" data-number="11">
<h1 data-number="11"><span class="header-section-number">11</span> Calculate episode-to-episode changes in viewership</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-18_6c48dc81d23665bd5eaec2c437b57cfc">
<div class="sourceCode cell-code" id="cb27"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb27-1"><a href="http://localhost:4557/#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb27-2"><a href="http://localhost:4557/#cb27-2" aria-hidden="true" tabindex="-1"></a>viewership_data<span class="sc">$</span>change <span class="ot">&lt;-</span> <span class="fu">c</span>(<span class="cn">NA</span>, <span class="fu">diff</span>(viewership_data<span class="sc">$</span>viewership))</span>
<span id="cb27-3"><a href="http://localhost:4557/#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-19_8edfd9ef97eb52144be9096b8240bb41">
<div class="sourceCode cell-code" id="cb28"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb28-1"><a href="http://localhost:4557/#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb28-2"><a href="http://localhost:4557/#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(viewership_data<span class="sc">$</span>change)</span>
<span id="cb28-3"><a href="http://localhost:4557/#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  NA -50 -50 -50 -50 -50 -50 -50 -50 -50</code></pre>
</div>
</div>
</section>
<section id="create-a-line-plot-of-episode-to-episode-changes-in-viewership" class="level1" data-number="12">
<h1 data-number="12"><span class="header-section-number">12</span> Create a line plot of episode-to-episode changes in viewership</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-20_578a5b48e32ccbd8e440edd4a135a647">
<div class="sourceCode cell-code" id="cb30"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb30-1"><a href="http://localhost:4557/#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb30-2"><a href="http://localhost:4557/#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="fu">ggplot</span>(viewership_data, <span class="fu">aes</span>(<span class="at">x =</span> episodes_per_season, <span class="at">y =</span> change)) <span class="sc">+</span></span>
<span id="cb30-3"><a href="http://localhost:4557/#cb30-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">geom_line</span>() <span class="sc">+</span></span>
<span id="cb30-4"><a href="http://localhost:4557/#cb30-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">labs</span>(<span class="at">title =</span> <span class="st">"Episode-to-Episode Changes in Viewership"</span>, <span class="at">x =</span> <span class="st">"Episode Number"</span>, <span class="at">y =</span> <span class="st">"Change in Viewership (in thousands)"</span>)</span>
<span id="cb30-5"><a href="http://localhost:4557/#cb30-5" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output-display">
<p><img src="./Discovery Tv Show Quarto_files/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="observed-changes-in-viewership" class="level1" data-number="13">
<h1 data-number="13"><span class="header-section-number">13</span> Observed changes in viewership</h1>
<div class="cell" data-hash="RR_report_cache/html/unnamed-chunk-21_c4bf7ece01fd4a89438ff7f21af79c9b">
<div class="sourceCode cell-code" id="cb31"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb31-1"><a href="http://localhost:4557/#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="in">```{r}</span></span>
<span id="cb31-2"><a href="http://localhost:4557/#cb31-2" aria-hidden="true" tabindex="-1"></a>observed_change <span class="ot">&lt;-</span> viewership_data<span class="sc">$</span>viewership[<span class="dv">5</span>] <span class="sc">-</span> viewership_data<span class="sc">$</span>viewership[<span class="dv">3</span>]</span>
<span id="cb31-3"><a href="http://localhost:4557/#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span>(<span class="st">"Viewership decreased by"</span>, observed_change, <span class="st">"between seasons 3 and 5."</span>)</span>
<span id="cb31-4"><a href="http://localhost:4557/#cb31-4" aria-hidden="true" tabindex="-1"></a><span class="in">```</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Viewership decreased by -100 between seasons 3 and 5.</code></pre>
</div>
</div>
</section>

</main>
<!-- /main column -->
<script id="quarto-html-after-body" type="application/javascript">
window.document.addEventListener("DOMContentLoaded", function (event) {
  const toggleBodyColorMode = (bsSheetEl) => {
    const mode = bsSheetEl.getAttribute("data-mode");
    const bodyEl = window.document.querySelector("body");
    if (mode === "dark") {
      bodyEl.classList.add("quarto-dark");
      bodyEl.classList.remove("quarto-light");
    } else {
      bodyEl.classList.add("quarto-light");
      bodyEl.classList.remove("quarto-dark");
    }
  }
  const toggleBodyColorPrimary = () => {
    const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
    if (bsSheetEl) {
      toggleBodyColorMode(bsSheetEl);
    }
  }
  toggleBodyColorPrimary();  
  const disableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'prefetch';
    }
  }
  const enableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'stylesheet';
    }
  }
  const manageTransitions = (selector, allowTransitions) => {
    const els = window.document.querySelectorAll(selector);
    for (let i=0; i < els.length; i++) {
      const el = els[i];
      if (allowTransitions) {
        el.classList.remove('notransition');
      } else {
        el.classList.add('notransition');
      }
    }
  }
  const toggleColorMode = (alternate) => {
    // Switch the stylesheets
    const alternateStylesheets = window.document.querySelectorAll('link.quarto-color-scheme.quarto-color-alternate');
    manageTransitions('#quarto-margin-sidebar .nav-link', false);
    if (alternate) {
      enableStylesheet(alternateStylesheets);
      for (const sheetNode of alternateStylesheets) {
        if (sheetNode.id === "quarto-bootstrap") {
          toggleBodyColorMode(sheetNode);
        }
      }
    } else {
      disableStylesheet(alternateStylesheets);
      toggleBodyColorPrimary();
    }
    manageTransitions('#quarto-margin-sidebar .nav-link', true);
    // Switch the toggles
    const toggles = window.document.querySelectorAll('.quarto-color-scheme-toggle');
    for (let i=0; i < toggles.length; i++) {
      const toggle = toggles[i];
      if (toggle) {
        if (alternate) {
          toggle.classList.add("alternate");     
        } else {
          toggle.classList.remove("alternate");
        }
      }
    }
    // Hack to workaround the fact that safari doesn't
    // properly recolor the scrollbar when toggling (#1455)
    if (navigator.userAgent.indexOf('Safari') > 0 && navigator.userAgent.indexOf('Chrome') == -1) {
      manageTransitions("body", false);
      window.scrollTo(0, 1);
      setTimeout(() => {
        window.scrollTo(0, 0);
        manageTransitions("body", true);
      }, 40);  
    }
  }
  const isFileUrl = () => { 
    return window.location.protocol === 'file:';
  }
  const hasAlternateSentinel = () => {  
    let styleSentinel = getColorSchemeSentinel();
    if (styleSentinel !== null) {
      return styleSentinel === "alternate";
    } else {
      return false;
    }
  }
  const setStyleSentinel = (alternate) => {
    const value = alternate ? "alternate" : "default";
    if (!isFileUrl()) {
      window.localStorage.setItem("quarto-color-scheme", value);
    } else {
      localAlternateSentinel = value;
    }
  }
  const getColorSchemeSentinel = () => {
    if (!isFileUrl()) {
      const storageValue = window.localStorage.getItem("quarto-color-scheme");
      return storageValue != null ? storageValue : localAlternateSentinel;
    } else {
      return localAlternateSentinel;
    }
  }
  let localAlternateSentinel = 'default';
  // Dark / light mode switch
  window.quartoToggleColorScheme = () => {
    // Read the current dark / light value 
    let toAlternate = !hasAlternateSentinel();
    toggleColorMode(toAlternate);
    setStyleSentinel(toAlternate);
  };
  // Ensure there is a toggle, if there isn't float one in the top right
  if (window.document.querySelector('.quarto-color-scheme-toggle') === null) {
    const a = window.document.createElement('a');
    a.classList.add('top-right');
    a.classList.add('quarto-color-scheme-toggle');
    a.href = "";
    a.onclick = function() { try { window.quartoToggleColorScheme(); } catch {} return false; };
    const i = window.document.createElement("i");
    i.classList.add('bi');
    a.appendChild(i);
    window.document.body.appendChild(a);
  }
  // Switch to dark mode if need be
  if (hasAlternateSentinel()) {
    toggleColorMode(true);
  } else {
    toggleColorMode(false);
  }
  const icon = "";
  const anchorJS = new window.AnchorJS();
  anchorJS.options = {
    placement: 'right',
    icon: icon
  };
  anchorJS.add('.anchored');
  const clipboard = new window.ClipboardJS('.code-copy-button', {
    target: function(trigger) {
      return trigger.previousElementSibling;
    }
  });
  clipboard.on('success', function(e) {
    // button target
    const button = e.trigger;
    // don't keep focus
    button.blur();
    // flash "checked"
    button.classList.add('code-copy-button-checked');
    var currentTitle = button.getAttribute("title");
    button.setAttribute("title", "Copied!");
    let tooltip;
    if (window.bootstrap) {
      button.setAttribute("data-bs-toggle", "tooltip");
      button.setAttribute("data-bs-placement", "left");
      button.setAttribute("data-bs-title", "Copied!");
      tooltip = new bootstrap.Tooltip(button, 
        { trigger: "manual", 
          customClass: "code-copy-button-tooltip",
          offset: [0, -8]});
      tooltip.show();    
    }
    setTimeout(function() {
      if (tooltip) {
        tooltip.hide();
        button.removeAttribute("data-bs-title");
        button.removeAttribute("data-bs-toggle");
        button.removeAttribute("data-bs-placement");
      }
      button.setAttribute("title", currentTitle);
      button.classList.remove('code-copy-button-checked');
    }, 1000);
    // clear code selection
    e.clearSelection();
  });
  function tippyHover(el, contentFn) {
    const config = {
      allowHTML: true,
      content: contentFn,
      maxWidth: 500,
      delay: 100,
      arrow: false,
      appendTo: function(el) {
          return el.parentElement;
      },
      interactive: true,
      interactiveBorder: 10,
      theme: 'quarto',
      placement: 'bottom-start'
    };
    window.tippy(el, config); 
  }
  const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
  for (var i=0; i<noterefs.length; i++) {
    const ref = noterefs[i];
    tippyHover(ref, function() {
      // use id or data attribute instead here
      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
      try { href = new URL(href).hash; } catch {}
      const id = href.replace(/^#\/?/, "");
      const note = window.document.getElementById(id);
      return note.innerHTML;
    });
  }
  const findCites = (el) => {
    const parentEl = el.parentElement;
    if (parentEl) {
      const cites = parentEl.dataset.cites;
      if (cites) {
        return {
          el,
          cites: cites.split(' ')
        };
      } else {
        return findCites(el.parentElement)
      }
    } else {
      return undefined;
    }
  };
  var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
  for (var i=0; i<bibliorefs.length; i++) {
    const ref = bibliorefs[i];
    const citeInfo = findCites(ref);
    if (citeInfo) {
      tippyHover(citeInfo.el, function() {
        var popup = window.document.createElement('div');
        citeInfo.cites.forEach(function(cite) {
          var citeDiv = window.document.createElement('div');
          citeDiv.classList.add('hanging-indent');
          citeDiv.classList.add('csl-entry');
          var biblioDiv = window.document.getElementById('ref-' + cite);
          if (biblioDiv) {
            citeDiv.innerHTML = biblioDiv.innerHTML;
          }
          popup.appendChild(citeDiv);
        });
        return popup.innerHTML;
      });
    }
  }
});
</script>
</div> <!-- /content -->



<script src="./Discovery Tv Show Quarto_files/zenscroll-min.js.download"></script>

<div class="modal__dialog micromodal-slide" id="quarto-log-error-modal" aria-hidden="true">
  <div class="modal__overlay" tabindex="2" data-micromodal-close="">
    <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="quarto-log-error-modal-title">
      <header class="modal__header">
        <h2 class="modal__title" id="quarto-log-error-modal-title">
          <i class="bi bi-exclamation-circle"></i>Error
        </h2>
        <button class="modal__close" aria-label="Close modal" data-micromodal-close=""></button>
      </header>
      <div class="modal__content" id="quarto-log-error-modal-content">
        <pre tabindex="1" id="quarto-log-error-display"></pre>
      </div>
      <footer class="modal__footer">
      </footer>
    </div>
  </div>
</div>
<style type="text/css">
#quarto-log-error-modal .modal__overlay {
  z-index: 5000;
}
#quarto-log-error-modal-content {
  border: 1px solid #dee2e6;
  overflow-y: auto;
}
#quarto-log-error-display {
  min-height: 100px;
  padding: 8px;
  margin-bottom: 0;
  font-family: monospace;
}
#quarto-log-error-display:focus {
  outline: none;
}
.modal__dialog {
  font-size: 16px;
}
.modal__overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.4);
  display: flex;
  justify-content: center;
  align-items: center;
}
.modal__container {
  position: fixed;
  top: 80px;
  background-color: #fff;
  padding: 15px;
  padding-top: 10px;
  min-width: 500px;
  max-width: 90%;
  max-height: 90vh;
  border-radius: 4px;
  overflow-y: auto;
  box-sizing: border-box;
}
.modal__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.modal__title {
  margin-top: 0;
  margin-bottom: 0;
  font-weight: 600;
  border-bottom: none;
  padding-bottom: 10px;
  font-size: 20px;
  color: rgb(191,71,65);
  line-height: 1.25;
  box-sizing: border-box;
}
.modal__title .bi {
  margin-right: 7px;
}
.modal__close {
  background: transparent;
  border: 0;
  margin-bottom: 10px;
}
.modal__header .modal__close:before { content: "\2715"; }
.modal__content {
  margin-top: 0;
  margin-bottom: 0;
}
@keyframes mmfadeIn {
    from { opacity: 0; }
      to { opacity: 1; }
}
@keyframes mmfadeOut {
    from { opacity: 1; }
      to { opacity: 0; }
}
@keyframes mmslideIn {
  from { transform: translateY(15%); }
    to { transform: translateY(0); }
}
@keyframes mmslideOut {
    from { transform: translateY(0); }
    to { transform: translateY(-10%); }
}
.micromodal-slide {
  display: none;
}
.micromodal-slide.is-open {
  display: block;
}
.micromodal-slide[aria-hidden="false"] .modal__overlay {
  animation: mmfadeIn .3s cubic-bezier(0.0, 0.0, 0.2, 1);
}
.micromodal-slide[aria-hidden="false"] .modal__container {
  animation: mmslideIn .3s cubic-bezier(0, 0, .2, 1);
}
.micromodal-slide[aria-hidden="true"] .modal__overlay {
  animation: mmfadeOut .3s cubic-bezier(0.0, 0.0, 0.2, 1);
}
.micromodal-slide[aria-hidden="true"] .modal__container {
  animation: mmslideOut .3s cubic-bezier(0, 0, .2, 1);
}
.micromodal-slide .modal__container,
.micromodal-slide .modal__overlay {
  will-change: transform;
} 
</style>
<script type="text/javascript">
  window.backupDefine = window.define; window.define = undefined;
  /*  ansi_up.js
   *  author : Dru Nelson
   *  license : MIT
   *  http://github.com/drudru/ansi_up
   */
   (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
          // AMD. Register as an anonymous module.
          define(['exports'], factory);
      } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
          // CommonJS
          factory(exports);
      } else {
          // Browser globals
          var exp = {};
          factory(exp);
          root.AnsiUp = exp.default;
      }
  }(this, function (exports) {
  "use strict";
  var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
      if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
      return cooked;
  };
  var PacketKind;
  (function (PacketKind) {
      PacketKind[PacketKind["EOS"] = 0] = "EOS";
      PacketKind[PacketKind["Text"] = 1] = "Text";
      PacketKind[PacketKind["Incomplete"] = 2] = "Incomplete";
      PacketKind[PacketKind["ESC"] = 3] = "ESC";
      PacketKind[PacketKind["Unknown"] = 4] = "Unknown";
      PacketKind[PacketKind["SGR"] = 5] = "SGR";
      PacketKind[PacketKind["OSCURL"] = 6] = "OSCURL";
  })(PacketKind || (PacketKind = {}));
  var AnsiUp = (function () {
      function AnsiUp() {
          this.VERSION = "5.1.0";
          this.setup_palettes();
          this._use_classes = false;
          this.bold = false;
          this.italic = false;
          this.underline = false;
          this.fg = this.bg = null;
          this._buffer = '';
          this._url_whitelist = { 'http': 1, 'https': 1 };
      }
      Object.defineProperty(AnsiUp.prototype, "use_classes", {
          get: function () {
              return this._use_classes;
          },
          set: function (arg) {
              this._use_classes = arg;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(AnsiUp.prototype, "url_whitelist", {
          get: function () {
              return this._url_whitelist;
          },
          set: function (arg) {
              this._url_whitelist = arg;
          },
          enumerable: false,
          configurable: true
      });
      AnsiUp.prototype.setup_palettes = function () {
          var _this = this;
          this.ansi_colors =
              [
                  [
                      { rgb: [0, 0, 0], class_name: "ansi-black" },
                      { rgb: [187, 0, 0], class_name: "ansi-red" },
                      { rgb: [0, 187, 0], class_name: "ansi-green" },
                      { rgb: [187, 187, 0], class_name: "ansi-yellow" },
                      { rgb: [0, 0, 187], class_name: "ansi-blue" },
                      { rgb: [187, 0, 187], class_name: "ansi-magenta" },
                      { rgb: [0, 187, 187], class_name: "ansi-cyan" },
                      { rgb: [255, 255, 255], class_name: "ansi-white" }
                  ],
                  [
                      { rgb: [85, 85, 85], class_name: "ansi-bright-black" },
                      { rgb: [255, 85, 85], class_name: "ansi-bright-red" },
                      { rgb: [0, 255, 0], class_name: "ansi-bright-green" },
                      { rgb: [255, 255, 85], class_name: "ansi-bright-yellow" },
                      { rgb: [85, 85, 255], class_name: "ansi-bright-blue" },
                      { rgb: [255, 85, 255], class_name: "ansi-bright-magenta" },
                      { rgb: [85, 255, 255], class_name: "ansi-bright-cyan" },
                      { rgb: [255, 255, 255], class_name: "ansi-bright-white" }
                  ]
              ];
          this.palette_256 = [];
          this.ansi_colors.forEach(function (palette) {
              palette.forEach(function (rec) {
                  _this.palette_256.push(rec);
              });
          });
          var levels = [0, 95, 135, 175, 215, 255];
          for (var r = 0; r < 6; ++r) {
              for (var g = 0; g < 6; ++g) {
                  for (var b = 0; b < 6; ++b) {
                      var col = { rgb: [levels[r], levels[g], levels[b]], class_name: 'truecolor' };
                      this.palette_256.push(col);
                  }
              }
          }
          var grey_level = 8;
          for (var i = 0; i < 24; ++i, grey_level += 10) {
              var gry = { rgb: [grey_level, grey_level, grey_level], class_name: 'truecolor' };
              this.palette_256.push(gry);
          }
      };
      AnsiUp.prototype.escape_txt_for_html = function (txt) {
          return txt.replace(/[&<>"']/gm, function (str) {
              if (str === "&")
                  return "&amp;";
              if (str === "<")
                  return "&lt;";
              if (str === ">")
                  return "&gt;";
              if (str === "\"")
                  return "&quot;";
              if (str === "'")
                  return "&#x27;";
          });
      };
      AnsiUp.prototype.append_buffer = function (txt) {
          var str = this._buffer + txt;
          this._buffer = str;
      };
      AnsiUp.prototype.get_next_packet = function () {
          var pkt = {
              kind: PacketKind.EOS,
              text: '',
              url: ''
          };
          var len = this._buffer.length;
          if (len == 0)
              return pkt;
          var pos = this._buffer.indexOf("\x1B");
          if (pos == -1) {
              pkt.kind = PacketKind.Text;
              pkt.text = this._buffer;
              this._buffer = '';
              return pkt;
          }
          if (pos > 0) {
              pkt.kind = PacketKind.Text;
              pkt.text = this._buffer.slice(0, pos);
              this._buffer = this._buffer.slice(pos);
              return pkt;
          }
          if (pos == 0) {
              if (len == 1) {
                  pkt.kind = PacketKind.Incomplete;
                  return pkt;
              }
              var next_char = this._buffer.charAt(1);
              if ((next_char != '[') && (next_char != ']')) {
                  pkt.kind = PacketKind.ESC;
                  pkt.text = this._buffer.slice(0, 1);
                  this._buffer = this._buffer.slice(1);
                  return pkt;
              }
              if (next_char == '[') {
                  if (!this._csi_regex) {
                      this._csi_regex = rgx(__makeTemplateObject(["\n                        ^                           # beginning of line\n                                                    #\n                                                    # First attempt\n                        (?:                         # legal sequence\n                          \u001B[                      # CSI\n                          ([<-?]?)              # private-mode char\n                          ([d;]*)                    # any digits or semicolons\n                          ([ -/]?               # an intermediate modifier\n                          [@-~])                # the command\n                        )\n                        |                           # alternate (second attempt)\n                        (?:                         # illegal sequence\n                          \u001B[                      # CSI\n                          [ -~]*                # anything legal\n                          ([\0-\u001F:])              # anything illegal\n                        )\n                    "], ["\n                        ^                           # beginning of line\n                                                    #\n                                                    # First attempt\n                        (?:                         # legal sequence\n                          \\x1b\\[                      # CSI\n                          ([\\x3c-\\x3f]?)              # private-mode char\n                          ([\\d;]*)                    # any digits or semicolons\n                          ([\\x20-\\x2f]?               # an intermediate modifier\n                          [\\x40-\\x7e])                # the command\n                        )\n                        |                           # alternate (second attempt)\n                        (?:                         # illegal sequence\n                          \\x1b\\[                      # CSI\n                          [\\x20-\\x7e]*                # anything legal\n                          ([\\x00-\\x1f:])              # anything illegal\n                        )\n                    "]));
                  }
                  var match = this._buffer.match(this._csi_regex);
                  if (match === null) {
                      pkt.kind = PacketKind.Incomplete;
                      return pkt;
                  }
                  if (match[4]) {
                      pkt.kind = PacketKind.ESC;
                      pkt.text = this._buffer.slice(0, 1);
                      this._buffer = this._buffer.slice(1);
                      return pkt;
                  }
                  if ((match[1] != '') || (match[3] != 'm'))
                      pkt.kind = PacketKind.Unknown;
                  else
                      pkt.kind = PacketKind.SGR;
                  pkt.text = match[2];
                  var rpos = match[0].length;
                  this._buffer = this._buffer.slice(rpos);
                  return pkt;
              }
              if (next_char == ']') {
                  if (len < 4) {
                      pkt.kind = PacketKind.Incomplete;
                      return pkt;
                  }
                  if ((this._buffer.charAt(2) != '8')
                      || (this._buffer.charAt(3) != ';')) {
                      pkt.kind = PacketKind.ESC;
                      pkt.text = this._buffer.slice(0, 1);
                      this._buffer = this._buffer.slice(1);
                      return pkt;
                  }
                  if (!this._osc_st) {
                      this._osc_st = rgxG(__makeTemplateObject(["\n                        (?:                         # legal sequence\n                          (\u001B\\)                    # ESC                           |                           # alternate\n                          (\u0007)                      # BEL (what xterm did)\n                        )\n                        |                           # alternate (second attempt)\n                        (                           # illegal sequence\n                          [\0-\u0006]                 # anything illegal\n                          |                           # alternate\n                          [\b-\u001A]                 # anything illegal\n                          |                           # alternate\n                          [\u001C-\u001F]                 # anything illegal\n                        )\n                    "], ["\n                        (?:                         # legal sequence\n                          (\\x1b\\\\)                    # ESC \\\n                          |                           # alternate\n                          (\\x07)                      # BEL (what xterm did)\n                        )\n                        |                           # alternate (second attempt)\n                        (                           # illegal sequence\n                          [\\x00-\\x06]                 # anything illegal\n                          |                           # alternate\n                          [\\x08-\\x1a]                 # anything illegal\n                          |                           # alternate\n                          [\\x1c-\\x1f]                 # anything illegal\n                        )\n                    "]));
                  }
                  this._osc_st.lastIndex = 0;
                  {
                      var match_1 = this._osc_st.exec(this._buffer);
                      if (match_1 === null) {
                          pkt.kind = PacketKind.Incomplete;
                          return pkt;
                      }
                      if (match_1[3]) {
                          pkt.kind = PacketKind.ESC;
                          pkt.text = this._buffer.slice(0, 1);
                          this._buffer = this._buffer.slice(1);
                          return pkt;
                      }
                  }
                  {
                      var match_2 = this._osc_st.exec(this._buffer);
                      if (match_2 === null) {
                          pkt.kind = PacketKind.Incomplete;
                          return pkt;
                      }
                      if (match_2[3]) {
                          pkt.kind = PacketKind.ESC;
                          pkt.text = this._buffer.slice(0, 1);
                          this._buffer = this._buffer.slice(1);
                          return pkt;
                      }
                  }
                  if (!this._osc_regex) {
                      this._osc_regex = rgx(__makeTemplateObject(["\n                        ^                           # beginning of line\n                                                    #\n                        \u001B]8;                    # OSC Hyperlink\n                        [ -:<-~]*       # params (excluding ;)\n                        ;                           # end of params\n                        ([!-~]{0,512})        # URL capture\n                        (?:                         # ST\n                          (?:\u001B\\)                  # ESC                           |                           # alternate\n                          (?:\u0007)                    # BEL (what xterm did)\n                        )\n                        ([ -~]+)              # TEXT capture\n                        \u001B]8;;                   # OSC Hyperlink End\n                        (?:                         # ST\n                          (?:\u001B\\)                  # ESC                           |                           # alternate\n                          (?:\u0007)                    # BEL (what xterm did)\n                        )\n                    "], ["\n                        ^                           # beginning of line\n                                                    #\n                        \\x1b\\]8;                    # OSC Hyperlink\n                        [\\x20-\\x3a\\x3c-\\x7e]*       # params (excluding ;)\n                        ;                           # end of params\n                        ([\\x21-\\x7e]{0,512})        # URL capture\n                        (?:                         # ST\n                          (?:\\x1b\\\\)                  # ESC \\\n                          |                           # alternate\n                          (?:\\x07)                    # BEL (what xterm did)\n                        )\n                        ([\\x20-\\x7e]+)              # TEXT capture\n                        \\x1b\\]8;;                   # OSC Hyperlink End\n                        (?:                         # ST\n                          (?:\\x1b\\\\)                  # ESC \\\n                          |                           # alternate\n                          (?:\\x07)                    # BEL (what xterm did)\n                        )\n                    "]));
                  }
                  var match = this._buffer.match(this._osc_regex);
                  if (match === null) {
                      pkt.kind = PacketKind.ESC;
                      pkt.text = this._buffer.slice(0, 1);
                      this._buffer = this._buffer.slice(1);
                      return pkt;
                  }
                  pkt.kind = PacketKind.OSCURL;
                  pkt.url = match[1];
                  pkt.text = match[2];
                  var rpos = match[0].length;
                  this._buffer = this._buffer.slice(rpos);
                  return pkt;
              }
          }
      };
      AnsiUp.prototype.ansi_to_html = function (txt) {
          this.append_buffer(txt);
          var blocks = [];
          while (true) {
              var packet = this.get_next_packet();
              if ((packet.kind == PacketKind.EOS)
                  || (packet.kind == PacketKind.Incomplete))
                  break;
              if ((packet.kind == PacketKind.ESC)
                  || (packet.kind == PacketKind.Unknown))
                  continue;
              if (packet.kind == PacketKind.Text)
                  blocks.push(this.transform_to_html(this.with_state(packet)));
              else if (packet.kind == PacketKind.SGR)
                  this.process_ansi(packet);
              else if (packet.kind == PacketKind.OSCURL)
                  blocks.push(this.process_hyperlink(packet));
          }
          return blocks.join("");
      };
      AnsiUp.prototype.with_state = function (pkt) {
          return { bold: this.bold, italic: this.italic, underline: this.underline, fg: this.fg, bg: this.bg, text: pkt.text };
      };
      AnsiUp.prototype.process_ansi = function (pkt) {
          var sgr_cmds = pkt.text.split(';');
          while (sgr_cmds.length > 0) {
              var sgr_cmd_str = sgr_cmds.shift();
              var num = parseInt(sgr_cmd_str, 10);
              if (isNaN(num) || num === 0) {
                  this.fg = this.bg = null;
                  this.bold = false;
                  this.italic = false;
                  this.underline = false;
              }
              else if (num === 1) {
                  this.bold = true;
              }
              else if (num === 3) {
                  this.italic = true;
              }
              else if (num === 4) {
                  this.underline = true;
              }
              else if (num === 22) {
                  this.bold = false;
              }
              else if (num === 23) {
                  this.italic = false;
              }
              else if (num === 24) {
                  this.underline = false;
              }
              else if (num === 39) {
                  this.fg = null;
              }
              else if (num === 49) {
                  this.bg = null;
              }
              else if ((num >= 30) && (num < 38)) {
                  this.fg = this.ansi_colors[0][(num - 30)];
              }
              else if ((num >= 40) && (num < 48)) {
                  this.bg = this.ansi_colors[0][(num - 40)];
              }
              else if ((num >= 90) && (num < 98)) {
                  this.fg = this.ansi_colors[1][(num - 90)];
              }
              else if ((num >= 100) && (num < 108)) {
                  this.bg = this.ansi_colors[1][(num - 100)];
              }
              else if (num === 38 || num === 48) {
                  if (sgr_cmds.length > 0) {
                      var is_foreground = (num === 38);
                      var mode_cmd = sgr_cmds.shift();
                      if (mode_cmd === '5' && sgr_cmds.length > 0) {
                          var palette_index = parseInt(sgr_cmds.shift(), 10);
                          if (palette_index >= 0 && palette_index <= 255) {
                              if (is_foreground)
                                  this.fg = this.palette_256[palette_index];
                              else
                                  this.bg = this.palette_256[palette_index];
                          }
                      }
                      if (mode_cmd === '2' && sgr_cmds.length > 2) {
                          var r = parseInt(sgr_cmds.shift(), 10);
                          var g = parseInt(sgr_cmds.shift(), 10);
                          var b = parseInt(sgr_cmds.shift(), 10);
                          if ((r >= 0 && r <= 255) && (g >= 0 && g <= 255) && (b >= 0 && b <= 255)) {
                              var c = { rgb: [r, g, b], class_name: 'truecolor' };
                              if (is_foreground)
                                  this.fg = c;
                              else
                                  this.bg = c;
                          }
                      }
                  }
              }
          }
      };
      AnsiUp.prototype.transform_to_html = function (fragment) {
          var txt = fragment.text;
          if (txt.length === 0)
              return txt;
          txt = this.escape_txt_for_html(txt);
          if (!fragment.bold && !fragment.italic && !fragment.underline && fragment.fg === null && fragment.bg === null)
              return txt;
          var styles = [];
          var classes = [];
          var fg = fragment.fg;
          var bg = fragment.bg;
          if (fragment.bold)
              styles.push('font-weight:bold');
          if (fragment.italic)
              styles.push('font-style:italic');
          if (fragment.underline)
              styles.push('text-decoration:underline');
          if (!this._use_classes) {
              if (fg)
                  styles.push("color:rgb(" + fg.rgb.join(',') + ")");
              if (bg)
                  styles.push("background-color:rgb(" + bg.rgb + ")");
          }
          else {
              if (fg) {
                  if (fg.class_name !== 'truecolor') {
                      classes.push(fg.class_name + "-fg");
                  }
                  else {
                      styles.push("color:rgb(" + fg.rgb.join(',') + ")");
                  }
              }
              if (bg) {
                  if (bg.class_name !== 'truecolor') {
                      classes.push(bg.class_name + "-bg");
                  }
                  else {
                      styles.push("background-color:rgb(" + bg.rgb.join(',') + ")");
                  }
              }
          }
          var class_string = '';
          var style_string = '';
          if (classes.length)
              class_string = " class=\"" + classes.join(' ') + "\"";
          if (styles.length)
              style_string = " style=\"" + styles.join(';') + "\"";
          return "<span" + style_string + class_string + ">" + txt + "</span>";
      };
      ;
      AnsiUp.prototype.process_hyperlink = function (pkt) {
          var parts = pkt.url.split(':');
          if (parts.length < 1)
              return '';
          if (!this._url_whitelist[parts[0]])
              return '';
          var result = "<a href=\"" + this.escape_txt_for_html(pkt.url) + "\">" + this.escape_txt_for_html(pkt.text) + "</a>";
          return result;
      };
      return AnsiUp;
  }());
  function rgx(tmplObj) {
      var subst = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          subst[_i - 1] = arguments[_i];
      }
      var regexText = tmplObj.raw[0];
      var wsrgx = /^\s+|\s+\n|\s*#[\s\S]*?\n|\n/gm;
      var txt2 = regexText.replace(wsrgx, '');
      return new RegExp(txt2);
  }
  function rgxG(tmplObj) {
      var subst = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          subst[_i - 1] = arguments[_i];
      }
      var regexText = tmplObj.raw[0];
      var wsrgx = /^\s+|\s+\n|\s*#[\s\S]*?\n|\n/gm;
      var txt2 = regexText.replace(wsrgx, '');
      return new RegExp(txt2, 'g');
  }
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = AnsiUp;
  }));
  // micromodal: https://github.com/Ghosh/micromodal
  !function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).MicroModal=t()}(this,(function(){"use strict";function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function t(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,n=new Array(t);o<t;o++)n[o]=e[o];return n}var n,i,a,r,s,l=(n=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],i=function(){function o(e){var n=e.targetModal,i=e.triggers,a=void 0===i?[]:i,r=e.onShow,s=void 0===r?function(){}:r,l=e.onClose,c=void 0===l?function(){}:l,d=e.openTrigger,u=void 0===d?"data-micromodal-trigger":d,f=e.closeTrigger,h=void 0===f?"data-micromodal-close":f,v=e.openClass,g=void 0===v?"is-open":v,m=e.disableScroll,b=void 0!==m&&m,y=e.disableFocus,p=void 0!==y&&y,w=e.awaitCloseAnimation,E=void 0!==w&&w,k=e.awaitOpenAnimation,M=void 0!==k&&k,A=e.debugMode,C=void 0!==A&&A;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.modal=document.getElementById(n),this.config={debugMode:C,disableScroll:b,openTrigger:u,closeTrigger:h,openClass:g,onShow:s,onClose:c,awaitCloseAnimation:E,awaitOpenAnimation:M,disableFocus:p},a.length>0&&this.registerTriggers.apply(this,t(a)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var i,a,r;return i=o,(a=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,o=new Array(t),n=0;n<t;n++)o[n]=arguments[n];o.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}))}))}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var o=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener("animationend",o,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var o=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(o),t.removeEventListener("animationend",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){(e.target.hasAttribute(this.config.closeTrigger)||e.target.parentNode.hasAttribute(this.config.closeTrigger))&&(e.preventDefault(),e.stopPropagation(),this.closeModal(e))}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(n);return Array.apply(void 0,t(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var o=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));o.length>0&&o[0].focus(),0===o.length&&t[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var o=t.indexOf(document.activeElement);e.shiftKey&&0===o&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&o===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}])&&e(i.prototype,a),r&&e(i,r),o}(),a=null,r=function(e){if(!document.getElementById(e))return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},s=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var o in t)r(o);return!0},{init:function(e){var o=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),n=t(document.querySelectorAll("[".concat(o.openTrigger,"]"))),r=function(e,t){var o=[];return e.forEach((function(e){var n=e.attributes[t].value;void 0===o[n]&&(o[n]=[]),o[n].push(e)})),o}(n,o.openTrigger);if(!0!==o.debugMode||!1!==s(n,r))for(var l in r){var c=r[l];o.targetModal=l,o.triggers=t(c),a=new i(o)}},show:function(e,t){var o=t||{};o.targetModal=e,!0===o.debugMode&&!1===r(e)||(a&&a.removeEventListeners(),(a=new i(o)).showModal())},close:function(e){e?a.closeModalById(e):a.closeModal()}});return"undefined"!=typeof window&&(window.MicroModal=l),l}));  
  window.define = window.backupDefine; window.backupDefine = undefined;
  </script>
<script type="text/javascript">
  (function () {
    // forward keydown events so shortcuts can work in vscode, see:
    // https://github.com/microsoft/vscode/issues/65452#issuecomment-586485815
    if (window.parent.postMessage) {
      window.document.addEventListener('keydown', e => {
        const event = {
          type: "keydown",
          data: {
            altKey: e.altKey,
            code: e.code,
            ctrlKey: e.ctrlKey,
            isComposing: e.isComposing,
            key: e.key,
            location: e.location,
            metaKey: e.metaKey,
            repeat: e.repeat,
            shiftKey: e.shiftKey
          }
        };
        window.parent.postMessage(event, '*');
      });
    }
    // listen for execCommand messages
    window.addEventListener("message", function (event) {
      if (event.data.type === "devhost-exec-command") {
        window.document.execCommand(event.data.data);
      } 
    }, true);
    const logEntries = new Array(1000);
    logEntries.offset = 0;
    function recordLogEntry(entry) {
      logEntries[logEntries.offset++] = entry;
      logEntries.offset %= logEntries.length;
    }
    function getLogEntry(i) { // backwards, 0 is most recent
        return logEntries[(logEntries.offset - 1 - i + logEntries.length) % logEntries.length];
    }
    const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    let path = window.location.pathname;
    if (!/\/$/.test(path)) path += "/";
    const devServerSocket = new WebSocket(protocol + "//" + window.location.host + path);
    let reloadPage = true;
    addEventListener("beforeunload", () => {
      // don't reload page in case of navigation events
      reloadPage = false;
    })
    devServerSocket.onopen = () => {
      console.log('Socket connection open. Listening for events.');
      // if the socket closes for any reason (e.g. this occurs in electron apps
      // when the computer suspends) then reload to reestablish the connection 
      devServerSocket.onclose = () => {
        if (reloadPage) {
          console.log('Socket connection closed. Reloading.');
          window.location.reload(true);
        }
      }
    };
    // append for errors that occur within the error window
    let lastError = 0;
    const kErrorWindow = 2500;
    function showError(msg) {
      const ansiUp = new AnsiUp
      const html = ansiUp.ansi_to_html(msg.trim());
      const display = document.getElementById("quarto-log-error-display");
      if (display.innerHTML && ((Date.now() - lastError) < kErrorWindow)) {
        display.innerHTML = display.innerHTML + "<br/>" +  html;
      } else {
        display.innerHTML = html
      }
      lastError = Date.now()
      MicroModal.show('quarto-log-error-modal', {
        awaitCloseAnimation: true,
        onClose: () => { display.innerHTML = ""; }
      });
      // post message to parent indicating we had an error
      if (window.parent.postMessage) {
        window.parent.postMessage({
          type: "error",
          msg: msg,
        }, "*");
      }
    }
    // see if there is already an error to show
    const renderError = document.getElementById("quarto-render-error");
    if (renderError) {
      showError(renderError.innerHTML.trim());
    }
    const normalizeTarget = (target) => {
      return target.replace(/\/index\.html/, "/")
    };
    devServerSocket.onmessage = (msg) => {
      if (msg.data.startsWith('reload')) {
        let target = normalizeTarget(msg.data.replace(/^reload/, ""));
        // prepend proxy path to target if we have one
        if (target) {
          const pathPrefix = 
            window.location.pathname.match(/^.*?\/p\/\w+\//) ||
            window.location.pathname.match(/^.*?\/user\/[\w\d]+\/proxy\/\d+\//);
          if (pathPrefix) {
            target = pathPrefix + target.slice(1);
          }
        }
        if (target && (target !== normalizeTarget(window.location.pathname))) {
          window.location.replace(target);
        } else {
          window.location.reload(true);
        }
      } else if (msg.data.startsWith('log:')) {
        const ansiUp = new AnsiUp
        const log = JSON.parse(msg.data.substr(4));
        recordLogEntry(log);
        if (log.levelName === "ERROR") {
          showError(log.msgFormatted)
        } else {
          // see if there is a knitr error to report
          const kExecutionHalted = "Execution halted";
          if (log.msg.indexOf(kExecutionHalted) !== -1) {
            // scan backwards for beginning of error
            const errorEntries = [getLogEntry(0).msgFormatted];
            for (let i=1; i<logEntries.length; i++) {
              const logEntry = getLogEntry(i);
              if (logEntry) {
                errorEntries.unshift(logEntry.msgFormatted);
                if (logEntry.msg.indexOf("Quitting from lines") !== -1) {
                  showError(errorEntries.join(""));
                  break;
                } else if (logEntry.msg.indexOf(kExecutionHalted) !== -1) {
                  break;
                }
              } else {
                break;
              }
            }
          }
        }
      }
    };
  })();
</script>

<script type="text/javascript">
  if (window.parent.postMessage) {
    // wait for message providing confirmation we are in a devhost
    window.addEventListener("message", function (event) {
      if (event.data.type === "devhost-init") {
        window.quartoDevhost = {
          openInputFile: function (line, column, highlight) {
            window.parent.postMessage({
              type: "openfile",
              file: "C:\Users\sg444423\Downloads\RR_report.qmd",
              line: line,
              column: column,
              highlight: highlight
            }, event.origin);
          }
        };
      } else if (event.data.type === "goback") {
        window.history.back()
      } else if (event.data.type === "goforward") {
        window.history.forward()
      }
    }, true);
    // notify host of navigation (e.g. for 'pop out' command)
    window.parent.postMessage({
      type: "navigate",
      href: window.location.href,
      file: "C:\Users\sg444423\Downloads\RR_report.qmd"
    }, "*");
  }
</script>
<a class="top-right quarto-color-scheme-toggle" href="http://localhost:4557/"><i class="bi"></i></a></body></html>
